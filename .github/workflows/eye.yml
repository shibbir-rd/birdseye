name: Ping Website Every 10 Minutes

on:
  schedule:
    - cron: "*/10 * * * *"  # Every 10 minutes
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository (Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ping Website and Keep One-Day Log
        id: ping
        run: |
          if [ -z "${{ secrets.TARGET_URL }}" ]; then
            echo "‚ùå TARGET_URL secret not set!"
            exit 1
          fi

          DATE=$(TZ="Asia/Dhaka" date '+%Y-%m-%d %H:%M:%S %Z')
          TODAY=$(TZ="Asia/Dhaka" date '+%Y-%m-%d')

          # Ping website directly using the secret
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" "${{ secrets.TARGET_URL }}")

          # Keep only today's log entries
          if [ -f status.txt ]; then
            grep "^\[$TODAY" status.txt > temp.txt || true
            mv temp.txt status.txt
          fi

          echo "[$DATE] -> $STATUS" >> status.txt

          # Save current status for recovery logic
          echo "$STATUS" > last_status.txt

          # Outputs for Telegram
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "url=${{ secrets.TARGET_URL }}" >> $GITHUB_OUTPUT

      - name: Read Previous Status
        id: prev
        run: |
          if [ -f prev_status.txt ]; then
            PREV_STATUS=$(cat prev_status.txt)
          else
            PREV_STATUS="200"
          fi
          echo "prev=$PREV_STATUS" >> $GITHUB_OUTPUT

      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "${{ steps.ping.outputs.status }}" > prev_status.txt

          git add status.txt prev_status.txt

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update status at $(TZ='Asia/Dhaka' date '+%Y-%m-%d %H:%M:%S %Z')"
            git push
          fi

      - name: Trim Git History (Keep Last 100 Commits)
        run: |
          TOTAL=$(git rev-list --count HEAD)
          KEEP=100

          if [ "$TOTAL" -gt "$KEEP" ]; then
            OLDEST_COMMIT=$(git rev-list --max-count=$KEEP HEAD | tail -n 1)
            git checkout --orphan temp-branch $OLDEST_COMMIT
            git commit -m "Trimmed history to last $KEEP commits"
            git rebase --onto temp-branch $OLDEST_COMMIT HEAD
            git branch -D temp-branch
            git gc --prune=now --aggressive
            git push origin HEAD:main --force
          fi

      - name: Send Telegram Alert if Site Down
        if: steps.ping.outputs.status != '200'
        run: |
          TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"
          STATUS="${{ steps.ping.outputs.status }}"
          DATE="${{ steps.ping.outputs.date }}"

          MESSAGE="üö® *Website Down Alert!*%0AüìÖ Time: ${DATE}%0Aüì° Status: ${STATUS}%0Aüåê URL: ${{ secrets.TARGET_URL }}"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown"

      - name: Send Telegram Recovery Notification
        if: steps.ping.outputs.status == '200' && steps.prev.outputs.prev != '200'
        run: |
          TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
          TELEGRAM_CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"
          DATE="${{ steps.ping.outputs.date }}"

          MESSAGE="‚úÖ *Website Recovered!*%0AüìÖ Time: ${DATE}%0Aüåê URL: ${{ secrets.TARGET_URL }}"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown"
